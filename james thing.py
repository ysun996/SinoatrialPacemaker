def ay(Vm):
    # w=0.11994999999999978
    w = 0.03375000000000002
    max_a_y = 0.00005

    if isinstance(Vm, float) == True:
        a = [1.4557319134e-12, 4.0945641782e-10, 4.6549818992e-08, 2.4903140216e-06, 6.1460577425e-05, 4.7453248494e-04, \
             2.5019715465e-03]
        a_y = a[0] * Vm ** 6 + a[1] * Vm ** 5 + a[2] * Vm ** 4 + a[3] * Vm ** 3 + a[4] * Vm ** 2 + a[5] * Vm + a[6]
        if a_y <= 0:
            a_y = 0.00001
    else:
        a = [1.4557319134e-12, 4.0945641782e-10, 4.6549818992e-08, 2.4903140216e-06, 6.1460577425e-05, 4.7453248494e-04, \
             2.5019715465e-03]
        a_y = a[0] * Vm ** 6 + a[1] * Vm ** 5 + a[2] * Vm ** 4 + a[3] * Vm ** 3 + a[4] * Vm ** 2 + a[5] * Vm + a[6]
        for i in range(len(Vm)):
            if a_y[i] <= 0:
                a_y[i] = 0.00001

                # a_y = a[0]*Vm**6+a[1]*Vm**5+a[2]*Vm**4+a[3]*Vm**3+a[4]*Vm**2+a[5]*Vm+a[6]
    a_y = a_y * w
    # a_y = (max_a_y * np.exp(-(Vm + 14.25) / 14.93))/3
    # a_y = (max_a_y * np.exp(-(Vm + 14.25) / 14.93))/3
    return a_y


def by(Vm):
    # w=0.11994999999999978
    w = 0.03375000000000002
    # max_b_y = 0.001
    if isinstance(Vm, float) == True:

        a = [3.5607174324e-13, 3.9587887660e-11, -6.9345321240e-09, -8.8541673551e-07, 4.5605591007e-05,
             9.4190808268e-03,
             3.3771510156e-01]
        b_y = a[0] * Vm ** 6 + a[1] * Vm ** 5 + a[2] * Vm ** 4 + a[3] * Vm ** 3 + a[4] * Vm ** 2 + a[5] * Vm + a[6]
        if b_y <= 0:
            b_y = 0.00001
    else:
        a = [3.5607174324e-13, 3.9587887660e-11, -6.9345321240e-09, -8.8541673551e-07, 4.5605591007e-05,
             9.4190808268e-03,
             3.3771510156e-01]
        b_y = a[0] * Vm ** 6 + a[1] * Vm ** 5 + a[2] * Vm ** 4 + a[3] * Vm ** 3 + a[4] * Vm ** 2 + a[5] * Vm + a[6]
        for i in range(len(Vm)):
            if b_y[i] <= 0:
                b_y[i] = 0.00001

    # b_y = a[0]*Vm**6+a[1]*Vm**5+a[2]*Vm**4+a[3]*Vm**3+a[4]*Vm**2+a[5]*Vm+a[6]
    b_y = b_y * w
    # b_y = np.exp(0.052*(Vm - 73.08))
    # b_y = (max_b_y * (Vm + 14.25) / (1 - np.exp(-(Vm + 14.25) / 5)))/3
    # b_y = (max_b_y * (Vm + 32) / (1 - np.exp(-(Vm + 32) / 5)))/3

    return b_y
